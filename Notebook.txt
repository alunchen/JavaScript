// 
  高性能JavaScript
	JavaScript 语言精髓与编程实践
	深入浅出JavaScript
	JavaScript数据结构和算法
	JavaScript Dom高级程序设计
	JavaScript设计模式与开发实践
	高性能网站建设指南

// npm
  npm config set registry https://mirrors.tencent.com/npm/
  npm config set registry https://registry.npm.taobao.org
                          https://registry.npmjs.org


  npm init 
	“scripts”:{
		"lib": "vue-cli-service build --target lib --name menu --dest lib packages/index.js"
	}
	// target:构建目标，默认为应用模式。这里修改为 lib 启用库模式
	// dest:  输出目录，默认 dist。这里我们改成 lib
	
  // "lib": "babel --target lib --name aijs --dest lib src.index.js"

  代码编译 
	babel-preset-env babel-cli
	.babelrc
		{"presets": ["env"]}

    
  npm i eslint-config-standard@14.1.1 eslint-plugin-standard -D

  "@tencent/eslint-config-tencent": "^0.13.0",
  "@typescript-eslint/eslint-plugin": "^4.22.0",
  "@typescript-eslint/parser": "^4.22.0",
  "babel-eslint": "^10.1.0",
  "eslint": "^7.25.0",
  "eslint-config-standard": "^16.0.2",
  "eslint-plugin-html": "^6.1.2",
  "eslint-plugin-import": "^2.22.1",
  "eslint-plugin-node": "^11.1.0",
  "eslint-plugin-promise": "^5.1.0",
  "eslint-plugin-standard": "^5.0.0",
  "eslint-plugin-vue": "^7.9.0",
  "vue-eslint-parser": "^7.6.0"

	 npm i eslint-config-standard@14.1.1 eslint-plugin-standard -D

// commit 提交规范
  feat：新功能
  fix：修补bug
  docs：文档
  style：格式
  refactor：重构
  test：增加测试
  chore：构建过程或者辅助工具的变动


// Git submit 
  git checkout <branc name>
  git checkout -b <local branch name>  origin/<remote branch name>
  git checkout -b <local branch name>
  git branch  显示本地分支
  git branch -a 显示本地和 远程分支
  git status  查看本地和远程是否一致
  git branch -d <local branch name> 删除本地分支
  git push origin -d <remote branch name> 删除远程分支


// 
函数节流
    如用户在刚请求完一次后端数据，假设后端接下来10秒都不会产生新数据，则可以控制用户10秒内
  不再对后端进行请求,或者当监听scroll事件时，有规则的每1秒执行一次handle函数。
  
  // lastTime    time
  
  let lastTime;
  async getData() {
    let time = new Date().getTime();
    if(!lastTime){
      lastTime = time;
    }
    if(time - lastTime < 10 * 1000) {
      return
    }
    lastTime = time;
    // ...coding
    const config = {
      url: '',
      params: {}
    }
    const res = await axios(config);
  }
  
// 	
函数防抖
    在某个事件停止n秒后再进行HTTP请求，如果在n秒内事件重复发生，则重新计时n秒后再进行HTTP请求。
  （input框根据输入内容不断拉取远程数据。）如果不进行防抖，则每敲入符号将进行一次HTTP请求，从而
  产生过多无意义请求。
    当input不断输入时，不会执行HTTP请求，只有在暂停一秒之后才会执行HTTP请求。
  
  // setTimeout  clearTimeout
  
  let timeId;
  async getData(){
    if(timeId){
      clearTimeout(timeId)
    }
    timeId = setTimeout(() => {
      let config  = {
        url : '',
        params: {}
      }
      const res = await axios(config)
    }, 1000)
  }
