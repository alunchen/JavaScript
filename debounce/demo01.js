/**
 * 防抖函数  debounce
 *    指的是某个函数在某段时间内，无论触发了多少回调，都只执行最后一次
 *    例如：设置一个等待3秒的函数，在这3秒内如果遇到函数调用就重新计时3秒，直至新的3秒内没有函数调用，
 * 此时执行函数，不然就重新计时
 * 
 *    原理： 利用定时器，函数第一次执行就设定一个定时器，之后调用时发现已经设置过定时器就清空之前的定时器
 * 并重新设定一个新的定时器，如果存在没有被清空的定时器，当定时器结果后触发函数执行
 * 
 *    为什么需要防抖：前端开发中，有一些事件，onresize、srcoll、mousemove、mousehover等，会被频繁触发，不做限制
 * 的话，有可能一秒之内执行几十次、几百次、如果在这些函数内部执行了其他函数，尤其是执行了操作 DOM 的函数（浏览器
 * 操作 DOM 是很耗费性能的）那不仅会浪费计算机资源，还会降低程序运行速度，甚至造成浏览器卡死、崩溃。
 *    除此之外，短时间内重复的 ajax 调用不仅会造成数据关系的混乱，还会造成网络拥塞，增加服务器压力，显然这个问题
 * 也是需要解决的。
 * 
 *    1. 频繁触发
 *    2. 耗时
 *    3. 以最后一次调用为准
 *  
 * 
 * 
 */

function debounce(fn, wait) {
  console.log('123123132312123')
  let timer = null
  return function() {
    let arg = arguments;
    if(timer !== null){
      clearTimeout(timer)
    }
    timer = setTimeout(() => {
      fn.apply(this, arg)
    }, wait);
  }
}

